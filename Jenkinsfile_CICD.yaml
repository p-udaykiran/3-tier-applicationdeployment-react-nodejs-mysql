pipeline {
    agent any

    tools {
        nodejs 'nodejs24' // NodeJS tool configured in Jenkins
    }

    environment {
        SCANNER_HOME = tool 'sonar-scanner' // SonarQube scanner location
    }

    stages {

        stage('üì• Source Code Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/p-udaykiran/3-tier-applicationdeployment-react-nodejs-mysql-.git'
            }
        }

        stage('‚öôÔ∏è Frontend Syntax Validation') {
            steps {
                dir('client') {
                    sh 'find . -name "*.js" -exec node --check {} +'
                }
            }
        }

        stage('‚öôÔ∏è Backend Syntax Validation') {
            steps {
                dir('api') {
                    sh 'find . -name "*.js" -exec node --check {} +'
                }
            }
        }

        stage('üîç GitLeaks - Secret Scanning') {
            steps {
                sh 'gitleaks detect --source ./client --exit-code 1'
                sh 'gitleaks detect --source ./api --exit-code 1'
            }
        }

        stage('üìä SonarQube Code Quality Analysis') {
            steps {
                withSonarQubeEnv('sonar-scanner') {
                    sh """
                        $SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectName=NodeJS-Project \
                        -Dsonar.projectKey=NodeJS-Project
                    """
                }
            }
        }

        stage('‚úÖ SonarQube Quality Gate Check') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
                }
            }
        }

        stage('üõ°Ô∏è Trivy Filesystem Scan') {
            steps {
                sh 'trivy fs --format table -o fs-report.html .'
            }
        }

        stage('üê≥ Build & Push Backend Docker Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred') {
                        dir('api') {
                            sh 'docker build -t udaypagidimari/backend:latest .'
                            sh 'trivy image --format table -o backend-image-report.html udaypagidimari/backend:latest'
                            sh 'docker push udaypagidimari/backend:latest'
                        }
                    }
                }
            }
        }

        stage('üê≥ Build & Push Frontend Docker Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred') {
                        dir('client') {
                            sh 'docker build -t udaypagidimari/frontend:latest .'
                            sh 'trivy image --format table -o frontend-image-report.html udaypagidimari/frontend:latest'
                            sh 'docker push udaypagidimari/frontend:latest'
                        }
                    }
                }
            }
        }

        stage('üõë Manual Approval for Production') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    input message: 'Approve deployment to PRODUCTION?', ok: 'Deploy üöÄ'
                }
            }
        }

        stage('üöÄ Deploy Application to Kubernetes Prod') {
            steps {
                script {
                    withKubeConfig(
                        caCertificate: '',
                        clusterName: 'uday-cluster',
                        contextName: '',
                        credentialsId: 'k8-token',
                        namespace: 'webapps',
                        restrictKubeConfigAccess: false,
                        serverUrl: 'https://47953BB39CD5B91945C93FBD9F94AEA7.gr7.ap-south-1.eks.amazonaws.com'
                    ) {
                        sh 'kubectl apply -f k8s-prod/sc.yaml'
                        sleep 20
                        sh 'kubectl apply -f k8s-prod/mysql.yaml -n webapps'
                        sh 'kubectl apply -f k8s-prod/backend.yaml -n webapps'
                        sh 'kubectl apply -f k8s-prod/frontend.yaml -n webapps'
                        sh 'kubectl apply -f k8s-prod/ci.yaml'
                        sh 'kubectl apply -f k8s-prod/ingress.yaml -n webapps'
                        sleep 30
                    }
                }
            }
        }

        stage('‚úÖ Verify Deployment To Prod') {
            steps {
                script {
                    withKubeConfig(
                        caCertificate: '',
                        clusterName: 'uday-cluster',
                        contextName: '',
                        credentialsId: 'k8-prod-token',
                        namespace: 'prod',
                        restrictKubeConfigAccess: false,
                        serverUrl: 'https://AFC6FCFF5360B30D5E8950396E38A8C4.gr7.ap-south-1.eks.amazonaws.com'
                    ) {
                        sh 'kubectl get pods -n prod'
                        sleep 20
                        sh 'kubectl get ingress -n prod'
                    }
                }
            }
        }
    }

    post {
        success {
            slackSend(
                channel: '#ci-cd-notification',
                color: '#2eb886',
                message: """
                *‚úÖ Pipeline Successful!*
                ‚Ä¢ Job: *${env.JOB_NAME}*
                ‚Ä¢ Build: *#${env.BUILD_NUMBER}*
                ‚Ä¢ Status: *SUCCESS*

                üîó <${env.BUILD_URL}|View Full Build Logs>
                """
            )
        }

        failure {
            slackSend(
                channel: '#ci-cd-notification',
                color: '#e01e5a',
                message: """
                *‚ùå Pipeline Failed!*
                ‚Ä¢ Job: *${env.JOB_NAME}*
                ‚Ä¢ Build: *#${env.BUILD_NUMBER}*
                ‚Ä¢ Status: *FAILED*

                üîó <${env.BUILD_URL}|View Full Build Logs>
                """
            )
        }
    }
}
